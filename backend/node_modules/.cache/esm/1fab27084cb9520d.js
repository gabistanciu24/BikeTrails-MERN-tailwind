let Schema,model,hash,sign;_4cb‍.x([["default",()=>_4cb‍.o]]);_4cb‍.w("mongoose",[["Schema",["Schema"],function(v){Schema=v}],["model",["model"],function(v){model=v}]]);_4cb‍.w("bcryptjs",[["hash",["hash"],function(v){hash=v}]]);_4cb‍.w("jsonwebtoken",[["sign",["sign"],function(v){sign=v}]]);



const UserSchema = new Schema(
  {
    avatar: { type: String, default: "" },
    name: { type: String, required: true },
    email: { type: String, required: true },
    password: { type: String, required: true },
    verified: { type: Boolean, default: false },
    verificationCode: { type: String, required: false },
    admin: { type: Boolean, default: false },
  },
  { timestamps: true }
);

UserSchema.pre("save", async function (next) {
  if (this.isModified("password")) {
    this.password = await hash(this.password, 10);
    return next();
  }
  return next();
});

UserSchema.methods.generateJWT = async function () {
  return await sign({ id: this._id }, process.env.JWT_SECRET);
};

const User = model("User", UserSchema);
_4cb‍.d(User);
